<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>RubyRoad</title>
  
  <subtitle>Notes.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-13T09:55:35.118Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>RubyZhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据结构之AVL树</title>
    <link href="http://yoursite.com/2019/10/13/AVL/"/>
    <id>http://yoursite.com/2019/10/13/AVL/</id>
    <published>2019-10-13T13:33:36.000Z</published>
    <updated>2019-10-13T09:55:35.118Z</updated>
    
    <content type="html"><![CDATA[<p>上节了解了二叉查找树，我们知道，二叉查找树的缺点是会出现一边倒（“瘸腿”）的情况。<br><img src="/images/数据结构之AVL树/badbst.png" width="50%" height="50%"><br>这种情况让二叉查找树的查找效率大打折扣，于是出现了自平衡二叉查找树（AVL树），它能通过一定机制保证二叉查找树的平衡。</p><h4 id="AVL树的特点"><a href="#AVL树的特点" class="headerlink" title="AVL树的特点"></a>AVL树的特点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">具有二叉查找树的全部特性</span><br><span class="line">每个节点的左子树和右子树的高度差至多等于1</span><br></pre></td></tr></table></figure><p><img src="/images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8BAVL%E6%A0%91/avl1.png" alt><br><img src="/images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8BAVL%E6%A0%91/avl2.png" alt><br>图一、图二为两颗二叉查找树（节点旁的红色数字是当前节点的高度），图一的BST符合AVL的特性（节点8的左孩子高度2与右孩子高度0相差1），所以是一颗AVL树；而图二的树不符合AVL树的特性（节点8的左孩子高度2与右孩子高度0相差2），要让它成为一颗AVL树，就需要对其进行变化。</p><a id="more"></a><hr><h4 id="AVL树的旋转"><a href="#AVL树的旋转" class="headerlink" title="AVL树的旋转"></a>AVL树的旋转</h4><p>旋转总共有四种形式：右旋、左旋、左右双旋、右左双旋</p><hr><h5 id="为什么要旋转"><a href="#为什么要旋转" class="headerlink" title="为什么要旋转"></a>为什么要旋转</h5><p>不管什么形式的旋转，旋转的目的是为了降低树的高度，使其平衡。</p><hr><h5 id="右旋"><a href="#右旋" class="headerlink" title="右旋"></a>右旋</h5><p>假如我们在节点插入的时候，出现了节点都倾向于左边的情况，例如：<br><img src="/images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8BAVL%E6%A0%91/yx1.png" alt><br>我们把这种倾向于左边的情况称为<strong>左-左型</strong>。这个时候，我们可以对节点8进行右旋操作，使它恢复平衡。<br><img src="/images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8BAVL%E6%A0%91/yx2.png" alt><br><code>即：以旋转节点为轴，顺时针旋转，使得自己被自己的左孩子取代，自己成为左孩子的右孩子，原来左孩子的右孩子成为自己的左孩子。</code><br>看一个动图：<br><img src="/images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8BAVL%E6%A0%91/yx.gif" alt><br>再看一个例子：<br><img src="/images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8BAVL%E6%A0%91/yx3.png" alt><br>节点5和10的高度差大于1，由于5的左孩子高度较高，所以此种情况是<strong>左-左型</strong>，对节点8进行右旋。<br><img src="/images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8BAVL%E6%A0%91/yx4.png" alt><br><strong>注意：节点6的变化！</strong></p><hr><h5 id="左旋"><a href="#左旋" class="headerlink" title="左旋"></a>左旋</h5><p>假如我们在节点插入的时候，出现了节点都倾向于右边的情况，例如：<br><img src="/images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8BAVL%E6%A0%91/zx1.png" alt><br>这种倾向被我们称为<strong>右-右型</strong>，我们对节点10进行左旋操作。<br><img src="/images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8BAVL%E6%A0%91/zx2.png" alt><br><code>即：以旋转节点为轴，逆时针旋转，使得自己被自己的右孩子取代，自己成为右孩子的左孩子，原来右孩子的左孩子成为自己的右孩子。</code><br>看一个动图：<br><img src="/images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8BAVL%E6%A0%91/zx.gif" alt><br>看一个例子：<br><img src="/images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8BAVL%E6%A0%91/zx3.png" alt><br>节点2和6的高度差大于1，由于6的右孩子高度较高，所以此种情况是<strong>右-右型</strong>，对节点4进行左旋。<br><img src="/images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8BAVL%E6%A0%91/zx4.png" alt><br><strong>注意：节点5的变化！</strong></p><hr><h5 id="左右双旋"><a href="#左右双旋" class="headerlink" title="左右双旋"></a>左右双旋</h5><p>如果我们在节点插入时出现这种状况，我们该怎么办呢？很显然，我们无法通过一次左旋或右旋来解决，下面来说说如何解决。<br><img src="/images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8BAVL%E6%A0%91/yz1.png" alt><br>我们就称它为<strong>右-左型</strong>吧，处理方法是先对节点10进行右旋。<br><img src="/images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8BAVL%E6%A0%91/yz2.png" alt><br>右旋后，我们发现树的结构变成了<strong>右-右型</strong>，于是我们再对节点7进行左旋。<br><img src="/images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8BAVL%E6%A0%91/yz3.png" alt><br>通过两次旋转，我们发现树平衡了。<br><font color="red">注意：两次旋转节点是不一样的！！！</font><br>看一个例子：<br><img src="/images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8BAVL%E6%A0%91/yz4.png" alt><br>节点2和6的高度差大于1，由于6的左孩子高度较高，所以此种情况是<strong>右-左型</strong>。<br><img src="/images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8BAVL%E6%A0%91/yz5.png" alt><br><strong>注意：节点4的变化！</strong></p><hr><h5 id="右左双旋"><a href="#右左双旋" class="headerlink" title="右左双旋"></a>右左双旋</h5><p><img src="/images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8BAVL%E6%A0%91/zy1.png" alt><br>我们就称它为<strong>左-右型</strong>吧，处理方法是先对节点5进行左旋。<br><img src="/images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8BAVL%E6%A0%91/zy2.png" alt><br>左旋后，我们发现树的结构变成了<strong>左-左型</strong>，于是我们再对节点8进行右旋。<br><img src="/images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8BAVL%E6%A0%91/zy3.png" alt><br>看一个例子：<br><img src="/images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8BAVL%E6%A0%91/zy4.png" alt><br>节点5和10的高度差大于1，由于5的右孩子高度较高，所以此种情况是<strong>左-右型</strong>。<br><img src="/images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8BAVL%E6%A0%91/zy5.png" alt><br><strong>注意：节点7的变化！</strong></p><hr><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>在插入过程中，会出现以下四种情况破坏AVL树的特性，我们可以采取如下相应的旋转:</p><ol><li>左-左型：做右旋</li><li>右-右型：做左旋</li><li>左-右型：先做左旋，再做右旋</li><li>右-左型：先做右旋，再做左旋</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上节了解了二叉查找树，我们知道，二叉查找树的缺点是会出现一边倒（“瘸腿”）的情况。&lt;br&gt;&lt;img src=&quot;/images/数据结构之AVL树/badbst.png&quot; width=&quot;50%&quot; height=&quot;50%&quot;&gt;&lt;br&gt;这种情况让二叉查找树的查找效率大打折扣，于是出现了自平衡二叉查找树（AVL树），它能通过一定机制保证二叉查找树的平衡。&lt;/p&gt;&lt;h4 id=&quot;AVL树的特点&quot;&gt;&lt;a href=&quot;#AVL树的特点&quot; class=&quot;headerlink&quot; title=&quot;AVL树的特点&quot;&gt;&lt;/a&gt;AVL树的特点&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;具有二叉查找树的全部特性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;每个节点的左子树和右子树的高度差至多等于1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img src=&quot;/images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8BAVL%E6%A0%91/avl1.png&quot; alt&gt;&lt;br&gt;&lt;img src=&quot;/images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8BAVL%E6%A0%91/avl2.png&quot; alt&gt;&lt;br&gt;图一、图二为两颗二叉查找树（节点旁的红色数字是当前节点的高度），图一的BST符合AVL的特性（节点8的左孩子高度2与右孩子高度0相差1），所以是一颗AVL树；而图二的树不符合AVL树的特性（节点8的左孩子高度2与右孩子高度0相差2），要让它成为一颗AVL树，就需要对其进行变化。&lt;/p&gt;
    
    </summary>
    
      <category term="Data Structure" scheme="http://yoursite.com/categories/Data-Structure/"/>
    
      <category term="Tree" scheme="http://yoursite.com/categories/Data-Structure/Tree/"/>
    
    
      <category term="AVL Tree" scheme="http://yoursite.com/tags/AVL-Tree/"/>
    
  </entry>
  
  <entry>
    <title>数据结构之二叉查找树BST</title>
    <link href="http://yoursite.com/2019/10/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/"/>
    <id>http://yoursite.com/2019/10/13/数据结构之二叉查找树/</id>
    <published>2019-10-12T22:35:18.000Z</published>
    <updated>2019-10-13T07:51:01.648Z</updated>
    
    <content type="html"><![CDATA[<p>在复习数据结构时，觉得有必要将这个内容记录下来，也查了一些资料、博客，做一下总结。<br>在下节说AVL树之前，我们先说一下二分查找树（BST）。</p><h2 id="二叉搜索树（二叉查找树）"><a href="#二叉搜索树（二叉查找树）" class="headerlink" title="二叉搜索树（二叉查找树）"></a>二叉搜索树（二叉查找树）</h2><h4 id="特点如下："><a href="#特点如下：" class="headerlink" title="特点如下："></a>特点如下：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">若它的左子树不为空，则左子树上所有的节点值都小于它的根节点值。</span><br><span class="line">若它的右子树不为空，则右子树上所有的节点值都大于它的根节点值。</span><br><span class="line">它的左右子树也分别可以充当为二叉查找树。</span><br></pre></td></tr></table></figure><a id="more"></a><p>例如：<br><img src="/images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/bst.png" alt></p><hr><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><p>可以让我们快速找到想要找到的值。</p><p>例如，我们想找到11这个数。根据二叉查找树的特性，我们查找的过程如下：</p><ol><li><p>和根节点8比较<br><img src="/images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/bstcomp1.png" alt></p></li><li><p>因为11&gt;8， 所以11只会在节点8的右子树中，我们查看右孩子10<br><img src="/images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/bstcomp2.png" alt></p></li><li><p>因为11&gt;10，继续查看10的右孩子13<br><img src="/images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/bstcomp3.png" alt></p></li><li><p>因为11&lt;13，所以11只会在13的左子树中，查看左孩子11<br><img src="/images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/bstcomp4.png" alt></p></li><li><p>我们发现11正好是想要查找的值，于是结束查找。</p></li></ol><p>二叉查找树的这种查找正是二分查找的思想，我们可以很快的找到目的节点，最大查找次数等于树的高度。</p><p>插入的时候，也是通过一层一层，找到适合自己的位置插入。</p><hr><h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><p>可能会出现一种一边倒的极端情况。</p><p>例如，给定一颗初始二叉查找树：<br><img src="/images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/badbst.png" alt></p><p>接着，我们陆续插入3、2、1、0<br><img src="/images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/badbst1.png" alt></p><p>我们可以明显的看到节点倾向一边。这种形态的二叉查找树在查找性能上，就大打折扣，几乎变成线性。</p><hr><h4 id="节点删除："><a href="#节点删除：" class="headerlink" title="节点删除："></a>节点删除：</h4><p>删除节点，可能会存在三种情况，这三种情况分别如下：</p><ol><li>没有左右子节点，可以直接删除</li><li>存在左节点或右节点，删除后需要对子节点进行移动</li><li>同时存在左节点和右节点，不能简单的删除，但是可以通过和后继节点交换后转换为前两种情况</li></ol><p>我们将使用图进行解释，初始状态如下图。<br><img src="/images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/bstdel.png" alt></p><p><code>我们会按照上面所述三种情况来解释。</code></p><h5 id="1-没有左右子节点"><a href="#1-没有左右子节点" class="headerlink" title="1. 没有左右子节点"></a>1. 没有左右子节点</h5><p>在图中，符合这种状况的节点有25,42,55,80,95， 我们随便拿一个节点95来演示删除该节点：<br><img src="/images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/del1.png" alt><br>删除后，如下图：<br><img src="/images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/del2.png" alt><br>这种情况是最简单的，只需要删除该节点以及该节点和父节点的关系即可。</p><h5 id="2-存在左节点或者右节点时"><a href="#2-存在左节点或者右节点时" class="headerlink" title="2. 存在左节点或者右节点时"></a>2. 存在左节点或者右节点时</h5><p>在图中，符合这个情况的节点有45,75两个节点，我们拿75来演示：<br><img src="/images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/del3.png" alt><br>删除后，如下图：<br><img src="/images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/del4.png" alt><br>这种情况，需要断两个关系，然后建立其父节点与子节点的关系。</p><h4 id="3-同时存在左右节点"><a href="#3-同时存在左右节点" class="headerlink" title="3. 同时存在左右节点"></a>3. 同时存在左右节点</h4><p>在图中，满足这个情况的节点有60,40,90,50这4个节点，我们以40为例：<br>当二叉查找树以中根序遍历时，遍历的结果是从小到大排列的顺序，如下图所示：<br><img src="/images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/del5.png" alt><br>当我们删除40节点的时候，整个中根序遍历的结果中，从42开始都往前移动了一位。42是40的后继节点，也就是比40大的节点中最小的节点。当某个节点存在右节点时，后继节点就是右节点中的最小值，<code>左侧节点总比右侧节点和父节点小，所以后继节点一定没有左节点。后继节点还有一个特点，就是他比40的左节点大，比40所有的右节点都小。</code> 因此，删除40的时候，可以直接将后继节点42的值赋给40节点，然后删除后继节点42。由于后继节点最多只有一个子节点，因此删除后继节点又变成了前两种情况。图示如下：<br><img src="/images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/del6.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在复习数据结构时，觉得有必要将这个内容记录下来，也查了一些资料、博客，做一下总结。&lt;br&gt;在下节说AVL树之前，我们先说一下二分查找树（BST）。&lt;/p&gt;&lt;h2 id=&quot;二叉搜索树（二叉查找树）&quot;&gt;&lt;a href=&quot;#二叉搜索树（二叉查找树）&quot; class=&quot;headerlink&quot; title=&quot;二叉搜索树（二叉查找树）&quot;&gt;&lt;/a&gt;二叉搜索树（二叉查找树）&lt;/h2&gt;&lt;h4 id=&quot;特点如下：&quot;&gt;&lt;a href=&quot;#特点如下：&quot; class=&quot;headerlink&quot; title=&quot;特点如下：&quot;&gt;&lt;/a&gt;特点如下：&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;若它的左子树不为空，则左子树上所有的节点值都小于它的根节点值。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;若它的右子树不为空，则右子树上所有的节点值都大于它的根节点值。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;它的左右子树也分别可以充当为二叉查找树。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Data Structure" scheme="http://yoursite.com/categories/Data-Structure/"/>
    
      <category term="Tree" scheme="http://yoursite.com/categories/Data-Structure/Tree/"/>
    
    
      <category term="Binary Search Tree" scheme="http://yoursite.com/tags/Binary-Search-Tree/"/>
    
  </entry>
  
  <entry>
    <title>Java遍历Map容器的两种方法</title>
    <link href="http://yoursite.com/2019/09/16/Java%E9%81%8D%E5%8E%86Map%E5%AE%B9%E5%99%A8%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/09/16/Java遍历Map容器的两种方法/</id>
    <published>2019-09-16T14:06:32.000Z</published>
    <updated>2019-09-16T07:51:25.394Z</updated>
    
    <content type="html"><![CDATA[<h3 id="在Map容器中："><a href="#在Map容器中：" class="headerlink" title="在Map容器中："></a>在Map容器中：</h3><p><strong>values():</strong><br>获取容器中的所有的值，没有键，没有对应关系</p><p><strong>KeySet():</strong><br>将Map中所有的键存入到Set容器中，因为Set具备迭代器。所以可以迭代取出所有的键，再根据get方法，获取每一个键对应的值。KeySet()迭代后，只能通过get()取key。</p><p><strong>entrySet():</strong><br>Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet()  //返回此映射中包含的映射关系的Set视图。Map.Entry表示映射关系。entrySet()迭代后，可以通过e.getKey(), e.getValue()获取key和value。返回的是Entry接口。</p><a id="more"></a><hr><h3 id="一、两种遍历Map的方式"><a href="#一、两种遍历Map的方式" class="headerlink" title="一、两种遍历Map的方式"></a>一、两种遍历Map的方式</h3><p>1.通过KeySet()遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(Iterator&lt;Integer&gt; iter = keySetMap.keySet().iterator(); iter.hasNext();) &#123;</span><br><span class="line">     Integer key = iter.next();</span><br><span class="line">     System.out.println(key + “----“ + keySetMap.get(key)); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.通过entrySet()遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(Iterator&lt;Map.Entry&lt;Integer, String&gt;&gt; iter = entrySetMap.entrySet().iterator(); iter.hasNext();) &#123;</span><br><span class="line">     Map.Entry&lt;Integer, String&gt; temp = iter.next();</span><br><span class="line">     System.out.println(temp.getKey() + “--“ + temp.getValue()); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ps: 两种方法都使用了迭代器，for循环的初始化条件总是为初始化一个Iterator，利用Iterator的hasNext()方法判断是否遍历结束，再利用next()方法获取下一个对象。</p><hr><h3 id="二、两种方法性能对比"><a href="#二、两种方法性能对比" class="headerlink" title="二、两种方法性能对比"></a>二、两种方法性能对比</h3><h5 id="测试代码如下："><a href="#测试代码如下：" class="headerlink" title="测试代码如下："></a>测试代码如下：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;Integer, String&gt; keySetMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        HashMap&lt;Integer, String&gt; entrySetMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">            keySetMap.put(i, <span class="string">"a"</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">            entrySetMap.put(i, <span class="string">"a"</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一种遍历Map的方式</span></span><br><span class="line">        <span class="keyword">long</span> startTime1 = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Iterator&lt;Integer&gt; iter = keySetMap.keySet().iterator();iter.hasNext();) &#123;</span><br><span class="line"></span><br><span class="line">            Integer key = iter.next();</span><br><span class="line">            System.out.print(key + <span class="string">"----"</span> + keySetMap.get(key) + <span class="string">","</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> endTime1 = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"++++++++++++++++++++++++++++++++++"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//第二种遍历Map的方式</span></span><br><span class="line">        <span class="keyword">long</span> startTime2 = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Iterator&lt;Map.Entry&lt;Integer,String&gt;&gt; iter = entrySetMap.entrySet().iterator(); iter.hasNext();) &#123;</span><br><span class="line"></span><br><span class="line">            Map.Entry&lt;Integer,String&gt; temp = iter.next();</span><br><span class="line">            System.out.print(temp.getKey() + <span class="string">"--"</span> + temp.getValue() + <span class="string">","</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> endTime2 = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">"第一种遍历耗时："</span> + (endTime1 - startTime1) + <span class="string">"ms"</span>);</span><br><span class="line">        System.out.println(<span class="string">"第二种遍历耗时："</span> + (endTime2 - startTime2) + <span class="string">"ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述程序中，我们创建了包含5000个对象的Set容器。对容器分别用KeySet()和entrySet()进行遍历。观察遍历运行结果，进行比较。</p><p>观察第一遍程序运行结果：<img src="/images/Java%E9%81%8D%E5%8E%86Map%E5%AE%B9%E5%99%A8%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95/test2.jpg" alt="test2"></p><p>观察第二遍程序运行结果：<img src="/images/Java%E9%81%8D%E5%8E%86Map%E5%AE%B9%E5%99%A8%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95/test1.jpg" alt="test1"></p><p>可以看到，entrySet()比KeySet()的运行时间少很多，多次运行程序，总是如此(如上图，只截取了两次)。</p><h5 id="为什么两种方法的性能差异这么大呢？"><a href="#为什么两种方法的性能差异这么大呢？" class="headerlink" title="为什么两种方法的性能差异这么大呢？"></a>为什么两种方法的性能差异这么大呢？</h5><p>再次观察两种遍历方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(Iterator&lt;Integer&gt; iter = keySetMap.keySet().iterator(); iter.hasNext();) &#123;</span><br><span class="line">     Integer key = iter.next();</span><br><span class="line">     System.out.println(key + “----“ + keySetMap.get(key)); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(Iterator&lt;Map.Entry&lt;Integer, String&gt;&gt; iter = entrySetMap.entrySet().iterator(); iter.hasNext();) &#123;</span><br><span class="line">     Map.Entry&lt;Integer, String&gt; temp = iter.next();</span><br><span class="line">     System.out.println(temp.getKey() + “--“ + temp.getValue()); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>可以看到，两种方法都是先通过迭代器遍历Map，此时，二者的性能应该是相同的。而差距体现在打印时： 1. keySet()是通过获取到的key再次去Map中遍历寻找相对应的value(相当于遍历了两次)。              2. 而entrySet中直接通过getKey()和getValue()获取key和value(相当于遍历了一次)。</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;在Map容器中：&quot;&gt;&lt;a href=&quot;#在Map容器中：&quot; class=&quot;headerlink&quot; title=&quot;在Map容器中：&quot;&gt;&lt;/a&gt;在Map容器中：&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;values():&lt;/strong&gt;&lt;br&gt;获取容器中的所有的值，没有键，没有对应关系&lt;/p&gt;&lt;p&gt;&lt;strong&gt;KeySet():&lt;/strong&gt;&lt;br&gt;将Map中所有的键存入到Set容器中，因为Set具备迭代器。所以可以迭代取出所有的键，再根据get方法，获取每一个键对应的值。KeySet()迭代后，只能通过get()取key。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;entrySet():&lt;/strong&gt;&lt;br&gt;Set&amp;lt;Map.Entry&amp;lt;K, V&amp;gt;&amp;gt; entrySet()  //返回此映射中包含的映射关系的Set视图。Map.Entry表示映射关系。entrySet()迭代后，可以通过e.getKey(), e.getValue()获取key和value。返回的是Entry接口。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
      <category term="collection" scheme="http://yoursite.com/categories/Java/collection/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Collection" scheme="http://yoursite.com/tags/Collection/"/>
    
      <category term="Iterator" scheme="http://yoursite.com/tags/Iterator/"/>
    
      <category term="Map" scheme="http://yoursite.com/tags/Map/"/>
    
  </entry>
  
</feed>
