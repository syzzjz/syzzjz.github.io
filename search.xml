<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[三层交换机vlan-DHCP中继]]></title>
    <url>%2F2021%2F02%2F04%2F%E4%B8%89%E5%B1%82%E4%BA%A4%E6%8D%A2%E6%9C%BAvlan-DHCP%E4%B8%AD%E7%BB%A7%2F</url>
    <content type="text"><![CDATA[实验描述实现不同vlan间的相互通信，并且每台pc能够自动获取ip,同时能够访问外网资源实验如图：开始配置1.配置trunk，先将三个二层交换机与三层交换机相连的端口配置为trunk。二层交换机配置命令：123confint f0/*switchport mode trunk三层交换机配置命令：1234confint range f0/1-3switchport trunk encapsulation dot1qswitchport mode trunk 2.三层交换机上配置vtp（自动同步至其余交换机） 1vtp domain name 3.创建vlan 1vlan 10,20,30,40 4.将端口加入vlan 12int f0/*switchport access vlan 10 5.开启三层交换机路由功能 1ip routing 6.为三层交换机配置虚拟vlan(其余vlan同理) 123int vlan 10ip add 10.1.1.254 255.255.255.0no shut 7.三层交换机上配置DHCP中继(其余vlan同理) 12int vlan 10ip helper-address 40.1.1.1 8.配置DNS服务器IP，开启DNS服务器的DHCP服务，并分别配置地址池 9.将几台pc全部调整为DHCP，自动获取ip 10.不同vlan间已实现相互通信，DNS服务器开启DNS、HTTP服务 11.不同pc可以通过域名访问服务器 12.三层交换机设置默认路由,通向外网 12345int f0/4no switchportip add 50.1.1.1 255.255.255.0no shutip route 0.0.0.0 0.0.0.0 50.1.1.2 13.配置路由器1（从左往右） 1234567891011int f0/0ip add 50.1.1.2 255.255.255.0no shutint f0/1ip add 60.1.1.1 255.255.255.0no shutip route 70.1.1.0 255.255.255.0 60.1.1.2ip route 10.1.1.0 255.255.255.0 50.1.1.1ip route 20.1.1.0 255.255.255.0 50.1.1.1ip route 30.1.1.0 255.255.255.0 50.1.1.1ip route 40.1.1.0 255.255.255.0 50.1.1.1 14.配置路由器2 12345678910int f0/1ip add 60.1.1.2 255.255.255.0no shutint f0/0ip add 70.1.1.254 255.255.255.0no shutip route 10.1.1.0 255.255.255.0 60.1.1.1ip route 20.1.1.0 255.255.255.0 60.1.1.1ip route 30.1.1.0 255.255.255.0 60.1.1.1ip route 40.1.1.0 255.255.255.0 60.1.1.1 15.配置外网服务的ip 16.验证是否可以访问 查看信息指令： 123查看接口ip：do show ip int brief查看路由信息：do show ip route查看vlan信息：do show vlan brief]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>VLAN</tag>
        <tag>DHCP</tag>
        <tag>三层交换机</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[win7粘滞键漏洞利用]]></title>
    <url>%2F2020%2F12%2F09%2Fwin7%E7%B2%98%E6%BB%9E%E9%94%AE%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%2F</url>
    <content type="text"><![CDATA[原理部分win7中，在登录界面连续按shift键5次可以调出粘滞键提示，而这个提示位于c:\windows\system32路径下，因此可以将这个提示程序掉包成cmd程序，实现在登录界面打开cmd程序，完成密码的重置或用户创建进而登录系统。利用过程1.首先，我们来测试win7是否有这个漏洞，我们在登录界面不输入密码，连按5次shift键，发现弹出了粘滞键提示。 2.我们强制关机，使其弹出如下界面，并选择启动修复。 3.弹出的这个界面中，我们点击取消。 4.等待系统进行修复（时间很长）。 5.在这个界面中，点击查看问题详细信息。 6.将详细信息拉到底部，有两个链接，一个是微软的链接，一个是本地链接，而且是个txt文件，我们点击txt链接。 7.打开txt后，点击右上角的“文件”–&gt;“打开”。 8.打开后，可以查看到系统的各种文件。 9.我们定位到c:\windows\system32路径下，找到粘滞键提示sethc，并给其改名。 10.我们找到同路径下的cmd程序，复制一份，改名为sethc，之后重启。 11.在登录界面，连按5次shift键调出cmd，输入whoami，发现是管理员身份，可直接对用户进行密码的重置（建议新建一个用户，并赋予管理员权限，从而方便的进行后续痕迹的擦除） 12.修改密码后，我们输入修改后的密码，成功登入系统。]]></content>
      <categories>
        <category>Cyber Security</category>
      </categories>
      <tags>
        <tag>exploit</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ethereum私有链部署]]></title>
    <url>%2F2020%2F06%2F08%2FEthereum%E7%A7%81%E6%9C%89%E9%93%BE%E9%83%A8%E7%BD%B2%2F</url>
    <content type="text"><![CDATA[Ethereum私有链的部署 最近刚写完毕设，对区块链有了一定的学习，学习之后，还是挺想动手体验体验（毕设只是纸上谈兵，并没有实际的操作）。于是找了很多文档，有了下面的这些东西，因为遇到很多问题，所以记录下来，便于以后自己翻阅。1.环境搭建本人使用的是win10系统，下载了git Bash，所以命令多还是以linux shell为主。 下载客户端首先，下载geth, geth全称Go-ethereum，是一个以太坊客户端，用go语言编写，属于最常用的客户端，当然还有其他语言写的客户端。访问https://geth.ethereum.org/downloads/，看到如下图： 配置语言环境下载go语言，下载完成后配置环境变量。 下载以太坊创建一个新目录Ethereum，然后通过cd进入此目录，之后依次执行: 1234git clone https://github.com/ethereum/go-ethereumcd go-ethereumgo get -u -v golang.org/x/net/contextgo install -v ./cmd/... PS: 如果遇到clone不下来的情况，可以去[码云](https://gitee.com/)注册个账号，然后先加载到码云仓库里，然后通过码云仓库下载，速度很快PPS：当golang.org/x/net/context失败时，不要急，是因为qiang的问题，可以通过代理服务帮助我们下载，只需下面一行代码，需要注意的是该方法只能支持 Go version &gt;= 1.11 1export GOPROXY = https://goproxy.io 至此，环境搭建完毕，开始进入测试。 2.开始测试创建创世区块准备创世区块配置文件，要运行私有链，我们就需要定义自己的创世区块，创世区块信息写在一个json格式的文件中。首先，将下面内容保存至一个json文件，如genesis.json。 12345678910111213141516&quot;config&quot;: &#123; &quot;chainId&quot;: 15, &quot;homesteadBlock&quot;: 0, &quot;eip150Block&quot;: 0, &quot;eip155Block&quot;: 0, &quot;eip158Block&quot;: 0 &#125;, &quot;coinbase&quot; : &quot;0x0000000000000000000000000000000000000000&quot;, &quot;difficulty&quot; : &quot;0x40000&quot;, &quot;extraData&quot; : &quot;&quot;, &quot;gasLimit&quot; : &quot;0xffffffff&quot;, &quot;nonce&quot; : &quot;0x0000000000000042&quot;, &quot;mixhash&quot; : &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;, &quot;parentHash&quot; : &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;, &quot;timestamp&quot; : &quot;0x00&quot;, &quot;alloc&quot;: &#123; &#125; cd进json文件所在的目录，然后执行： 1geth –datadir testNet init genesis.json geth … init …表示区块链的初始化，-datadir 后面跟一个目录名字，这里为testNet，表示指定的数据目录存放至testNet中。 启动私有链节点1geth --datadir testNet --dev.period 1 console 2&gt;&gt; test.log 执行这个命令后，会进入geth控制台，如下图： 命令参数说明：–dev 启用开发者模式，开发者网络会使用POA共识，默认预分配一个开发者账户并会自动开始挖矿。console 进入控制台2&gt;&gt;test.log 表示控制台日志输出到test.log文件 PS：dev模式在版本更新之后，新增了一个参数项，在以前版本只使用-dev然后执行miner.start()就可以挖矿，但后面版本中，只有发送交易时才会挖一个块。当miner.start()之后，不管返回是不是null，先看节点高度是否增高，增高则已挖过块；反之，则不然。 12--dev Ephemeral proof-of-authority network with a pre-funded developer account, mining enabled--dev.period value Block period to use in developer mode (0 = mine only if transaction pending) (default: 0) 可以另打开一个终端，实时显示日志： 1tail -f test.log 使用geth进行转账已知，当用dev命令进入终端时，会预分配一个开发者账户，这个账户余额充足，可用以下命令来进行余额的查询。 1&gt;eth.getBalance(eth.accounts[0]) 要完成转账，需再创建一个账户(这里“123456”为账户的私钥密码) 1&gt;personal.newAccount(&quot;123456&quot;) 创建完成后，可以查看它的余额，新账户，余额自然是0.（我这里新建的账户为第三个账户，所以为eth.accounts[2]） 查看当前区块链的高度，返回应该是0 12&gt;eth.blockNumber0 要想进行交易，需要先将转账用户解锁，需要密码时，直接敲回车。需要注意，每隔一段时间，账户会自动锁定，所以每次交易之前，都需要先进行unlock操作。 1&gt;personal.unlockAccount(eth.accounts[0]) 发起交易 1&gt;eth.sendTransaction(&#123;from:eth.accounts[0],to:eth.accounts[1],value:web3.toWei(1,&quot;ether&quot;)&#125;) 查看区块高度，此时为0，因为还没有挖矿，交易还没有被添加上去。 12&gt;eth.blockNumber0 开始挖矿（返回为null时，可能已经挖矿结束，也可能没有挖矿） 12&gt;miner.start()null 查看区块高度，此时高度应该为1 12&gt;eth.blockNumber1 然后查看被转账用户，看看余额是否变化。 12&gt;eth.getBalance(eth.accounts[2])1000000000000000000 交易完成！]]></content>
      <categories>
        <category>Blockchain</category>
      </categories>
      <tags>
        <tag>ethereum</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JVM类加载机制]]></title>
    <url>%2F2019%2F10%2F19%2FJVMload%2F</url>
    <content type="text"><![CDATA[类加载的机制JVM把class文件加载到内存，并对数据进行校验、解析和初始化，最终形成JVM可以直接使用的Java类型的过程。 加载 将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区中的运行时数据结构，在堆中生成一个代表这个类的java.lang.Class对象，作为方法区类数据的访问入口。（这个过程需要类加载器参与） 链接：将Java类的二进制代码合并到JVM的运行状态中的过程 验证：确保加载的类信息符合JVM规范，没有安全方面的问题 准备：正式为类变量（static变量）分配内存并设置类变量初始值的阶段，这些内存都将在方法区中进行分配 解析：虚拟机常量池内的符号引用替换为直接引用的过程 初始化：为类的静态变量赋予正确的初始值 初始化阶段是执行类构造器()方法的过程。类构造器()方法是由编译器自动收集类中的所有类变量的赋值动作和静态语句块(static块)中的语句合并产生的。 当初始化一个类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化。 虚拟机会保证一个类的()方法在多线程环境中被正确加锁和同步。 当访问一个Java类的静态域时，只有真正声明这个域的类才会被初始化。 测试代码：123456789101112131415161718192021222324252627282930313233343536373839package practice;public class Demo01 &#123; static &#123; System.out.println("Demo01的静态初始化块"); &#125; public static void main(String[] args) &#123; System.out.println("Demo01的main方法！"); A a = new A(); System.out.println(a.width); A a2 = new A(); &#125;&#125;class B extends A &#123; static &#123; System.out.println("静态初始化B"); &#125;&#125;class A extends A_Father &#123; public static int width=300; public static final int MAX=100; static &#123; System.out.println("静态初始化类A"); &#125; public A() &#123; System.out.println("创建A类的对象"); this.width = 100; &#125;&#125;class A_Father &#123; static &#123; System.out.println("静态初始化A_Father"); &#125;&#125; 可以看到，在没有new A之前，都没有对A类进行加载，而是直接加载初始化main方法所在的类，并直接调用main方法。创建a2对象时，没有再加载A类，说明同一个类只会加载一次（一定时间内）。 类加载过程中的细节：类的主动引用 new一个类的对象 调用类的静态成员（除了final常量）和静态方法 使用java.lang.reflect包的方法对类进行反射调用 当虚拟机启动，java Hello，则一定会初始化Hello类，说白了就是先启动main方法所在的类 当初始化一个类，如果其父类没有被初始化，则先会初始化他的父类 类的被动调用（不会发生类的初始化） 当访问一个静态域时，只有真正声明这个域的类才会被初始化 通过子类引用父类的静态变量，不会导致子类初始化 通过数组定义类引用，不会触发此类的初始化 引用常量不会触发此类的初始化（常量在编译阶段就存入调用类的常量池中了） 123456789//主动引用new A();System.out.println(A.width);Class.forName("practice.A");//被动引用System.out.println(B.width);A[] as = new A[10];System.out.println(A.MAX);]]></content>
      <categories>
        <category>Java</category>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[反射机制与Class类]]></title>
    <url>%2F2019%2F10%2F16%2FReflection%2F</url>
    <content type="text"><![CDATA[反射机制 指的是可以于运行时加载、探知、使用编译期间完全未知的类。 程序在运行状态中，可以动态加载一个只有名称的类，对于任意一个已加载的类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性。 加载完类之后，在堆内存中，就产生了一个Class类型的对象（一个类只有一个Class对象），这个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构。这个对象就像一面镜子，透过这个镜子看到类的结构，所以，形象的称之为：反射。 关于Class类 java.lang.Class类十分特殊，用来表示java中类型（class/interface/enum/annotation/primitive type/void）本身 Class类对象包含了某个被加载的类对应一个Class对象 当一个class被加载，或当加载器（class loader）的defineClass()被JVM调用，JVM便自动产生一个Class对象 Class类是Reflection的根源针对任何想动态加载、运行的类，唯有先获得相应的Class对象 获取Class类对象的三种方式 方式一 1Class c = 对象.getClass(); 方式二 1Class c = 类名.class; 方式三（最常用的方式） 1Class c = Class.forName(&quot;包名.类名&quot;); 对上述三种方式做个形象的类比。我们知道，类就好比一张图纸，而类的对象则是根据图纸生产出来的产品。假设，我们现在想生产一部Iphone手机，则生产图纸就是这个Class对象： 方式一：买了一部手机，然后拆开分析内部结构，进行研究 方式二：买通工程师，直接拿到图纸 方式三：已知图纸存在某个地方，由我们的人员去偷，去定位 1234567891011121314151617181920public class ReflectTest &#123; public static void main(String[] args) throws ClassNotFoundException &#123; //三种方式 //1、对象.getClass() Class clz = new Iphone().getClass(); //2、类.class clz = Iphone.class; //3、Class.forName("包名.类名") clz = Class.forName("reflection.Iphone"); &#125;&#125;class Iphone &#123; public Iphone() &#123; &#125;&#125; 测试代码123456789101112131415161718192021222324252627282930313233343536public class TestReflection &#123; public static void main(String[] args) &#123; String path = "reflection.User"; try &#123; //方式一 Class clazz = Class.forName(path); System.out.println(clazz.hashCode()); Class clazz2 = Class.forName(path); //一个类只对应一个Class对象 System.out.println(clazz2.hashCode()); System.out.println(clazz.equals(clazz2)); //true //方式二 Class strClazz = String.class; //方式三 Class strClazz2 = path.getClass(); System.out.println(strClazz == strClazz2); //true Class intClazz = int.class; //也可以获取基本数据类型 int[] arr01 = new int[10]; int[] arr02 = new int[30]; int[][] arr03 = new int[30][]; double[] arr04 = new double[10]; System.out.println(arr01.getClass() == arr02.getClass()); //true 与元素类型和维数有关，都是一维，所以Class对象相同 System.out.println(arr01 .getClass().hashCode()); System.out.println(arr03 .getClass().hashCode());//与arr01维数不同，所以hashcode不同，即不同的Class对象 System.out.println(arr04.getClass().hashCode());//与arr01的元素类型不同，所以不是同一个对象 &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125;&#125; Class的描述中，提到了对于数组类型，只有元素类型和维数都相同才有相同的Class对象。 注：hashCode不同，肯定不是同一个对象。 反射机制性能问题123User u4 = clazz.newInstance();Field f = clazz.getDeclaredField(&quot;name&quot;); f.setAccessible(true);f.set(u4, &quot;zjz3&quot;); 当name为私有属性时，如果不将setAccessible设为true的话，是无法为属性赋值的。 setAccessible 启用和禁用访问安全检查的开关，值为true，则指示反射的对象在使用时应该取消Java语言访问检查。值为false则指示反射的对象应该实施Java语言访问检查。并不是为true就能访问，为false就不能访问。 禁止安全检查，可以提高反射的运行速度。 可以考虑使用：cglib/javaassist字节码操作]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>reflection</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构之AVL树]]></title>
    <url>%2F2019%2F10%2F13%2FAVL%2F</url>
    <content type="text"><![CDATA[上节了解了二叉查找树，我们知道，二叉查找树的缺点是会出现一边倒（“瘸腿”）的情况。这种情况让二叉查找树的查找效率大打折扣，于是出现了自平衡二叉查找树（AVL树），它能通过一定机制保证二叉查找树的平衡。AVL树的特点12具有二叉查找树的全部特性每个节点的左子树和右子树的高度差至多等于1图一、图二为两颗二叉查找树（节点旁的红色数字是当前节点的高度），图一的BST符合AVL的特性（节点8的左孩子高度2与右孩子高度0相差1），所以是一颗AVL树；而图二的树不符合AVL树的特性（节点8的左孩子高度2与右孩子高度0相差2），要让它成为一颗AVL树，就需要对其进行变化。 AVL树的旋转旋转总共有四种形式：右旋、左旋、左右双旋、右左双旋 为什么要旋转不管什么形式的旋转，旋转的目的是为了降低树的高度，使其平衡。 右旋假如我们在节点插入的时候，出现了节点都倾向于左边的情况，例如：我们把这种倾向于左边的情况称为左-左型。这个时候，我们可以对节点8进行右旋操作，使它恢复平衡。即：以旋转节点为轴，顺时针旋转，使得自己被自己的左孩子取代，自己成为左孩子的右孩子，原来左孩子的右孩子成为自己的左孩子。看一个动图：再看一个例子：节点5和10的高度差大于1，由于5的左孩子高度较高，所以此种情况是左-左型，对节点8进行右旋。注意：节点6的变化！ 左旋假如我们在节点插入的时候，出现了节点都倾向于右边的情况，例如：这种倾向被我们称为右-右型，我们对节点10进行左旋操作。即：以旋转节点为轴，逆时针旋转，使得自己被自己的右孩子取代，自己成为右孩子的左孩子，原来右孩子的左孩子成为自己的右孩子。看一个动图：看一个例子：节点2和6的高度差大于1，由于6的右孩子高度较高，所以此种情况是右-右型，对节点4进行左旋。注意：节点5的变化！ 左右双旋如果我们在节点插入时出现这种状况，我们该怎么办呢？很显然，我们无法通过一次左旋或右旋来解决，下面来说说如何解决。我们就称它为右-左型吧，处理方法是先对节点10进行右旋。右旋后，我们发现树的结构变成了右-右型，于是我们再对节点7进行左旋。通过两次旋转，我们发现树平衡了。注意：两次旋转节点是不一样的！！！看一个例子：节点2和6的高度差大于1，由于6的左孩子高度较高，所以此种情况是右-左型。注意：节点4的变化！ 右左双旋我们就称它为左-右型吧，处理方法是先对节点5进行左旋。左旋后，我们发现树的结构变成了左-左型，于是我们再对节点8进行右旋。看一个例子：节点5和10的高度差大于1，由于5的右孩子高度较高，所以此种情况是左-右型。注意：节点7的变化！ 总结在插入过程中，会出现以下四种情况破坏AVL树的特性，我们可以采取如下相应的旋转: 左-左型：做右旋 右-右型：做左旋 左-右型：先做左旋，再做右旋 右-左型：先做右旋，再做左旋]]></content>
      <categories>
        <category>Data Structure</category>
        <category>Tree</category>
      </categories>
      <tags>
        <tag>AVL Tree</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构之二叉查找树BST]]></title>
    <url>%2F2019%2F10%2F13%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%2F</url>
    <content type="text"><![CDATA[在复习数据结构时，觉得有必要将这个内容记录下来，也查了一些资料、博客，做一下总结。在下节说AVL树之前，我们先说一下二分查找树（BST）。二叉搜索树（二叉查找树）特点如下：123若它的左子树不为空，则左子树上所有的节点值都小于它的根节点值。若它的右子树不为空，则右子树上所有的节点值都大于它的根节点值。它的左右子树也分别可以充当为二叉查找树。 例如： 优点：可以让我们快速找到想要找到的值。 例如，我们想找到11这个数。根据二叉查找树的特性，我们查找的过程如下： 和根节点8比较 因为11&gt;8， 所以11只会在节点8的右子树中，我们查看右孩子10 因为11&gt;10，继续查看10的右孩子13 因为11&lt;13，所以11只会在13的左子树中，查看左孩子11 我们发现11正好是想要查找的值，于是结束查找。 二叉查找树的这种查找正是二分查找的思想，我们可以很快的找到目的节点，最大查找次数等于树的高度。 插入的时候，也是通过一层一层，找到适合自己的位置插入。 缺点：可能会出现一种一边倒的极端情况。 例如，给定一颗初始二叉查找树： 接着，我们陆续插入3、2、1、0 我们可以明显的看到节点倾向一边。这种形态的二叉查找树在查找性能上，就大打折扣，几乎变成线性。 节点删除：删除节点，可能会存在三种情况，这三种情况分别如下： 没有左右子节点，可以直接删除 存在左节点或右节点，删除后需要对子节点进行移动 同时存在左节点和右节点，不能简单的删除，但是可以通过和后继节点交换后转换为前两种情况 我们将使用图进行解释，初始状态如下图。 我们会按照上面所述三种情况来解释。 1. 没有左右子节点在图中，符合这种状况的节点有25,42,55,80,95， 我们随便拿一个节点95来演示删除该节点：删除后，如下图：这种情况是最简单的，只需要删除该节点以及该节点和父节点的关系即可。 2. 存在左节点或者右节点时在图中，符合这个情况的节点有45,75两个节点，我们拿75来演示：删除后，如下图：这种情况，需要断两个关系，然后建立其父节点与子节点的关系。 3. 同时存在左右节点在图中，满足这个情况的节点有60,40,90,50这4个节点，我们以40为例：当二叉查找树以中根序遍历时，遍历的结果是从小到大排列的顺序，如下图所示：当我们删除40节点的时候，整个中根序遍历的结果中，从42开始都往前移动了一位。42是40的后继节点，也就是比40大的节点中最小的节点。当某个节点存在右节点时，后继节点就是右节点中的最小值，左侧节点总比右侧节点和父节点小，所以后继节点一定没有左节点。后继节点还有一个特点，就是他比40的左节点大，比40所有的右节点都小。 因此，删除40的时候，可以直接将后继节点42的值赋给40节点，然后删除后继节点42。由于后继节点最多只有一个子节点，因此删除后继节点又变成了前两种情况。图示如下：]]></content>
      <categories>
        <category>Data Structure</category>
        <category>Tree</category>
      </categories>
      <tags>
        <tag>Binary Search Tree</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java遍历Map容器的两种方法]]></title>
    <url>%2F2019%2F09%2F16%2FJava%E9%81%8D%E5%8E%86Map%E5%AE%B9%E5%99%A8%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[在Map容器中：values():获取容器中的所有的值，没有键，没有对应关系KeySet():将Map中所有的键存入到Set容器中，因为Set具备迭代器。所以可以迭代取出所有的键，再根据get方法，获取每一个键对应的值。KeySet()迭代后，只能通过get()取key。entrySet():Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet() //返回此映射中包含的映射关系的Set视图。Map.Entry表示映射关系。entrySet()迭代后，可以通过e.getKey(), e.getValue()获取key和value。返回的是Entry接口。 一、两种遍历Map的方式1.通过KeySet()遍历 1234for(Iterator&lt;Integer&gt; iter = keySetMap.keySet().iterator(); iter.hasNext();) &#123; Integer key = iter.next(); System.out.println(key + “----“ + keySetMap.get(key)); &#125; 2.通过entrySet()遍历 1234for(Iterator&lt;Map.Entry&lt;Integer, String&gt;&gt; iter = entrySetMap.entrySet().iterator(); iter.hasNext();) &#123; Map.Entry&lt;Integer, String&gt; temp = iter.next(); System.out.println(temp.getKey() + “--“ + temp.getValue()); &#125; ps: 两种方法都使用了迭代器，for循环的初始化条件总是为初始化一个Iterator，利用Iterator的hasNext()方法判断是否遍历结束，再利用next()方法获取下一个对象。 二、两种方法性能对比测试代码如下：12345678910111213141516171819202122232425262728293031323334353637383940414243444546public class Test &#123; public static void main(String[] args) &#123; HashMap&lt;Integer, String&gt; keySetMap = new HashMap&lt;&gt;(); HashMap&lt;Integer, String&gt; entrySetMap = new HashMap&lt;&gt;(); for(int i = 0; i &lt; 5000; i++) &#123; keySetMap.put(i, "a" + i); &#125; for(int i = 0; i &lt; 5000; i++) &#123; entrySetMap.put(i, "a" + i); &#125; //第一种遍历Map的方式 long startTime1 = System.currentTimeMillis(); for(Iterator&lt;Integer&gt; iter = keySetMap.keySet().iterator();iter.hasNext();) &#123; Integer key = iter.next(); System.out.print(key + "----" + keySetMap.get(key) + ","); &#125; long endTime1 = System.currentTimeMillis(); System.out.println("++++++++++++++++++++++++++++++++++"); //第二种遍历Map的方式 long startTime2 = System.currentTimeMillis(); for(Iterator&lt;Map.Entry&lt;Integer,String&gt;&gt; iter = entrySetMap.entrySet().iterator(); iter.hasNext();) &#123; Map.Entry&lt;Integer,String&gt; temp = iter.next(); System.out.print(temp.getKey() + "--" + temp.getValue() + ","); &#125; long endTime2 = System.currentTimeMillis(); System.out.println(); System.out.println("第一种遍历耗时：" + (endTime1 - startTime1) + "ms"); System.out.println("第二种遍历耗时：" + (endTime2 - startTime2) + "ms"); &#125;&#125; 在上述程序中，我们创建了包含5000个对象的Set容器。对容器分别用KeySet()和entrySet()进行遍历。观察遍历运行结果，进行比较。 观察第一遍程序运行结果： 观察第二遍程序运行结果： 可以看到，entrySet()比KeySet()的运行时间少很多，多次运行程序，总是如此(如上图，只截取了两次)。 为什么两种方法的性能差异这么大呢？再次观察两种遍历方法。 1234for(Iterator&lt;Integer&gt; iter = keySetMap.keySet().iterator(); iter.hasNext();) &#123; Integer key = iter.next(); System.out.println(key + “----“ + keySetMap.get(key)); &#125; 1234for(Iterator&lt;Map.Entry&lt;Integer, String&gt;&gt; iter = entrySetMap.entrySet().iterator(); iter.hasNext();) &#123; Map.Entry&lt;Integer, String&gt; temp = iter.next(); System.out.println(temp.getKey() + “--“ + temp.getValue()); &#125; 可以看到，两种方法都是先通过迭代器遍历Map，此时，二者的性能应该是相同的。 而差距体现在打印时： 1. keySet()是通过获取到的key再次去Map中遍历寻找相对应的value(相当于遍历了两次)。 2. 而entrySet中直接通过getKey()和getValue()获取key和value(相当于遍历了一次)。]]></content>
      <categories>
        <category>Java</category>
        <category>collection</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Collection</tag>
        <tag>Iterator</tag>
        <tag>Map</tag>
      </tags>
  </entry>
</search>
